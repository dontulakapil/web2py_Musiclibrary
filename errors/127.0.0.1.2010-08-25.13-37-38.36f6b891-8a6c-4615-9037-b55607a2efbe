(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/chiinna/Desktop/linux_web2py/applications/Musiclibrary/models/db.py'
p4
sS'code'
p5
S"# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL('gae')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n    db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key='sha512:0b6b5e1d-4a77-41dd-8b4e-4f8a423334ed'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# crud.settings.auth=auth                      # enforces authorization on crud\n# mail=Mail()                                  # mailer\n# mail.settings.server='smtp.gmail.com:587'    # your SMTP server\n# mail.settings.sender='you@gmail.com'         # your email\n# mail.settings.login='username:password'      # your credentials or None\n# auth.settings.mailer=mail                    # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['verify_email'])+'/%(key)s to verify your email'\n# auth.settings.reset_password_requires_verification = True\n# auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below, for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\nimport datetime\n#this table specifies album in which the song is being added. The user when adds the song the album name gets extracted from the song and is added to the album table. This gives us a clear division of songs based on albums ###\ndb.define_table('album',\nField('name','string'),\nField('info','text'),\nField('image','upload')\n)\n## This table is for all the languages\ndb.define_table('languages',\nField('name','string'))\ndb.define_table('songs',\n    Field('name','string'),\n    Field('file','upload'),\n    Field('userid',db.auth_user),\n    Field('album',db.album),\n    Field('artist','string'),\n    Field('duration','integer'),\n    Field('datetime1','string'),\n    Field('language',db.languages))\ndb.songs.language.requires = IS_IN_DB(db,'languages.id','languages.name')\ndb.songs.album.requires = IS_IN_DB(db,'album.id','album.name')\ndb.songs.userid.requires = IS_IN_DB(db,'auth_user.id','auth_user.first_name')\n#This is for the comments\ndb.define_table('comments',\nField('userid',db.auth_user),\nField('songid',db.songs),\nField('comment','text'),\nField('language',db.languages)\n)\ndb.album.language.requires = IS_IN_DB(db,'languages.id','languages.name')\ndb.comments.songid.requires = IS_IN_DB(db,'songs.id','songs.name')\ndb.comments.userid.requires = IS_IN_DB(db,'auth_user.id','auth_user.first_name')\n#This is for average rating\ndb.define_table('rating',\n    Field('songid',db.songs),\n    Field('rating','integer'),\n    Field('noofusersrated','integer'))\ndb.rating.songid.requires = IS_IN_DB(db,'songs.id','songs.name')\n#This is for the various playlists which the user can add like favourites,language wise.....\ndb.define_table('playlist',\n    Field('userid',db.auth_user),\n    Field('name','string'))\n#This is for the rating of the song the user can rate all the songs...\ndb.define_table('ratings',\n    Field('userid',db.auth_user),\n    Field('songid',db.songs),\n    Field('rating','integer'))\n#This is for the separation of songs into the various playlists for the specified user\ndb.define_table('like',\n    Field('songid',db.songs),\n    Field('userid',db.auth_user),\n    Field('plylist',db.playlist))\ndb.like.songid.requires = IS_IN_DB(db,'songs.id','songs.name')\ndb.like.plylist.requires = IS_IN_DB(db,'playlist.id','playlist.name')\ndb.like.userid.requires = IS_IN_DB(db,'auth_user.id','auth_user.first_name')\n#this is for portal feed back to improve technically\ndb.define_table('feedback',\n    Field('userid',db.auth_user),\n    Field('feedback','text',requires = [IS_NOT_EMPTY()]))\n#This table is for requesting any songs from users to all and admin\ndb.define_table('requests',\n    Field('userid',db.auth_user),\n    Field('request','text',requires = [IS_NOT_EMPTY()]))\n# this table is to report is any songs is against to rules to admin to del them from users\ndb.define_table('reportabuse',\n    Field('userid',db.auth_user),\n    Field('songid',db.songs))\n#this table is for user to upload his profile pic\ndb.define_table('uploadpic',\n    Field('userid',db.auth_user),\n    Field('file','upload'))\ndb.ratings.userid.requires=IS_IN_DB(db,'auth_user.id','auth_user.first_name')\ndb.ratings.songid.requires=IS_IN_DB(db,'songs.id','songs.name')\ndb.uploadpic.userid.requires = IS_IN_DB(db,'auth_user.id','auth_user.first_name')\ndb.playlist.userid.requires = IS_IN_DB(db,'auth_user.id','auth_user.first_name')\ndb.reportabuse.songid.requires = IS_IN_DB(db,'songs.id','songs.name')\ndb.rating.songid.writable = db.rating.songid.readable = False\ndb.album.id.writable = db.album.id.readable = False\ndb.songs.id.writable = db.songs.id.readable = False\ndb.comments.id.writable = db.comments.id.readable = False\ndb.rating.id.writable = db.rating.id.readable = False\ndb.like.id.writable = db.like.id.readable = False\ndb.feedback.id.writable = db.feedback.id.readable = False\ndb.songs.userid.writable = db.songs.userid.readable = False\ndb.requests.userid.writable = db.requests.userid.readable = False\ndb.reportabuse.userid.writable = db.reportabuse.userid.readable = False\ndb.requests.id.writable = db.requests.id.readable = False\ndb.reportabuse.id.writable = db.reportabuse.id.readable = False\ndb.playlist.id.writable = db.playlist.id.readable = False\ndb.feedback.userid.writable = db.feedback.id.readable = False\ndb.comments.userid.writable = db.comments.userid.readable = False\ndb.comments.songid.writable = db.comments.songid.readable = False\n\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/chiinna/Desktop/linux_web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/chiinna/Desktop/linux_web2py/applications/Musiclibrary/models/db.py", line 94, in <module>\n    db.album.language.requires = IS_IN_DB(db,\'languages.id\',\'languages.name\')\n  File "/home/chiinna/Desktop/linux_web2py/gluon/sql.py", line 1573, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'language\'\n'
p8
s.