(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/chiinna/Desktop/web2py/applications/Musiclibrary/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport os  \n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = T(\'Welcome to Your Music Library\')\n    file1=db().select(db.uploadpic.ALL)\n    form=db(db.playlist.userid==auth.user_id).select()\n    firstname=db().select(db.auth_user.ALL)\n    #lastname=auth.user_last_name\n    form1=db().select(db.songs.ALL)\n    return dict(firstname=firstname,message=T(\'Hello World\'),file1=file1,form=form,form1=form1)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\ndef playlistsongs():\n    k=request.args(0)\n    song=db(db.like.plylist==k).select()\n    #row=db().select(db.like.ALL, db.songs.ALL, left=db.like.on(db.songs.id==db.like.songid))\n    song1=db().select(db.songs.ALL)\n    return(dict(row=song,song1=song1,k=k))\ndef rating():\n    k=request.args(0)\n    k2=request.args(1)\n    k1=request.args(2)\n#    form=SQLFORM(db.ratings)\n    form=db(db.ratings.userid==auth.user_id).select()\n    if(form[0]):\n       form[0].update_record(rating=k2)\n    if(form[0]==None):\n       db.ratings.insert(userid=auth.user_id)\n       db.ratings.insert(rating=k2)\n       db.ratings.insert(songid=k)\n       session.flash = \'rated\'\n    redirect(URL(r=request,f="playlistsongs",args=k1))\n    return(dict(form=form))\ndef upload():\n    form=SQLFORM(db.songs)\n    form.vars.userid=auth.user_id\n    path1=os.getcwd()\n    if form.accepts(request.vars,session):\n        k=form.vars.id\n        form=db(db.songs.id==k).select()\n        from mutagen.mp3 import MP3\n        from mutagen.easyid3 import EasyID3\n        path1=os.getcwd()\n        #path2=os.path.join(path,form.vars.file)\n        path2=path1+form.vars.file\n        m = MP3(path2, ID3=EasyID3)\n        form[0].update_record(artist=m[\'artist\'][0])\n        form[0].update_record(name= m[\'title\'][0])\n        form[0].update_record(datetime1=m[\'date\'][0])\n        form[0].update_record(duration= m.info.length)\n        #redirect(URL(r=request,f="test1",args=k))\n        k1=m[\'album\'][0]\n        form1=db(db.album.name==k).select()\n       # redirect(URL(r=request,f="test3",args=[k1]))\n       # if(form1[0].name):\n       #     form[0].update_record(album=form1[0].id)\n       # else:\n       #     redirect(URL(r=request,f="test1",args=[k,k1]))      \n    return(dict(form=form,path1=path1))\ndef test1():\n    form1=SQLFORM(db.album)\n    form1.vars.album=request.args(1)\n    if form1.accepts(request.vars,session):\n        form=db(db.songs.id==request.args(0)).select()\n        k=request.vars.id\n        form[0].update_record(album=k)\n       # redirect(URL(r=request,f="test2",args=[request.args(0)]))\n    return(dict(k=request.args(0),form1=form1,k1=request.args(1)))\ndef test2():\n    return (dict(row=db(db.songs.name.upper().like(\'%request.args(0)%\')).select()))\ndef test3():\n    return(dict(form=request.args(0)))\ndef albums():\n    k=request.args(0)\n    form=db(db.album.id==k).select()\n    form1=db(db.songs.album==k).select()\n    form2=db().select(db.songs.ALL)\n    return(dict(form=form,form1=form1,form2=form2))\n\ndef search():\n    form = SQLFORM.factory(\n        Field(\'search\', requires=IS_NOT_EMPTY()))\n    if form.accepts(request.vars, session):\n       redirect(URL(r=request,f="test2",args=[form.vars.search]))     \n    return(dict(form=form))\n\nresponse._vars=response._caller(upload)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/chiinna/Desktop/web2py/gluon/restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "/home/chiinna/Desktop/web2py/applications/Musiclibrary/controllers/default.py", line 134, in <module>\n  File "/home/chiinna/Desktop/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/chiinna/Desktop/web2py/applications/Musiclibrary/controllers/default.py", line 92, in upload\n    path2=path1+form.vars.file\nAttributeError: \'Rows\' object has no attribute \'vars\'\n'
p8
s.