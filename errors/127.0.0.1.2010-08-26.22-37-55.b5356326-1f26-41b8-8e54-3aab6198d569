(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/chiinna/Desktop/linux_web2py/applications/Musiclibrary/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport os  \ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = T(\'Welcome to Your Music Library\')\n    file1=db(db.uploadpic.userid==auth_user.id).select()\n    form=db(db.playlist.userid==auth.user_id).select()\n    firstname=db().select(db.auth_user.ALL)\n    #lastname=auth.user_last_name\n    form1=db().select(db.songs.ALL)\n    return dict(firstname=firstname,message=T(\'Hello World\'),file1=file1,form=form,form1=form1)\n\n@auth.requires_login()\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n@auth.requires_login()\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n@auth.requires_login()\ndef myplaylist():\n    form=db(db.playlist.userid==auth.user_id).select()\n    form1=db().select(db.songs.ALL)\n    return(dict(form=form,form1=form1))\ndef playlistsongs():\n    k=request.args(0)\n    song=db(db.like.plylist==k).select()\n    #row=db().select(db.like.ALL, db.songs.ALL, left=db.like.on(db.songs.id==db.like.songid))\n    song1=db().select(db.songs.ALL)\n    return(dict(row=song,song1=song1,k=k))\ndef rating():\n    k=request.args(0)\n    k2=request.args(1)\n    k1=request.args(2)\n#    form=SQLFORM(db.ratings)\n    form=db((db.ratings.userid==auth.user_id)&(db.ratings.songid==k)).select()\n    if(len(form)!=0):\n       form1=db(db.rating.songid==k).select()\n       if(len(form1)!=0):           \n           total=((form1[0].rating*form1[0].noofusersrated)-form[0].rating+int(k2))/form1[0].noofusersrated\n           form1[0].update_record(rating=total)\n       else:\n           db.rating.insert(songid=k,rating=k2,noofusersrated=\'1\')\n       form[0].update_record(rating=k2)\n    else:\n       db.ratings.insert(userid=auth.user_id,rating=k2,songid=k)\n       db.rating.insert(rating=k2,noofusersrated=\'1\',songid=k)\n    session.flash = \'rated\'\n    redirect(URL(r=request,f="playlistsongs",args=k1))\n    return(dict(form=form))\ndef upload():\n    form=SQLFORM(db.songs)\n    form.vars.userid=auth.user_id\n    path1=os.getcwd()\n    if form.accepts(request.vars,session):\n        k=form.vars.id\n        form=db(db.songs.id==k).select()\n        from mutagen.mp3 import MP3\n        from mutagen.easyid3 import EasyID3\n        path1=os.getcwd()\n        #path2=os.path.join(path,form.vars.file)\n        form3=db().select(db.songs.ALL)\n        path2=str(path1)+\'/applications/Musiclibrary/uploads/\'+str(form3[-1].file)\n        m = MP3(path2, ID3=EasyID3)\n        form[0].update_record(artist=m[\'artist\'][0])\n        form[0].update_record(name= m[\'title\'][0])\n        form[0].update_record(datetime1=m[\'date\'][0])\n        form[0].update_record(duration= m.info.length)\n        #redirect(URL(r=request,f="test1",args=k))\n        k1=str(m[\'album\'][0])\n        form1=db(db.album.name==k).select()\n        #redirect(URL(r=request,f="test3",args=[k1]))\n        if(len(form1)!=0):\n            form[0].update_record(album=form1[0].id)\n        else:\n            db.album.insert(name=k1,language=form[0].language)\n            k=(db().select(db.album.ALL))[-1].id\n            form[0].update_record(album=k)            \n            redirect(URL(r=request,f="test3",args=[k]))      \n    return(dict(form=form,path1=path1))\ndef test1():\n    form1=SQLFORM(db.album)\n    form1.vars.album=request.args(1)\n    if form1.accepts(request.vars,session):\n        form=db(db.songs.id==request.args(0)).select()\n        k=request.vars.id\n        form[0].update_record(album=k)\n       # redirect(URL(r=request,f="test2",args=[request.args(0)]))\n    return(dict(k=request.args(0),form1=form1,k1=request.args(1)))\ndef test2():\n    k=request.args(0)\n    l=\'%\'+str(k)+\'%\'\n    if(request.args[1]==\'Songs\'):\n        return (dict(row=db(db.songs.name.upper().like(l)).select(),k=request.args(0)))\n    if(request.args[1]==\'Album\'):\n        return (dict(row=db(db.album.name.upper().like(l)).select(),k=request.args(0)))\n    if(request.args[1]==\'Artist\'):\n        return (dict(row=db(db.songs.artist.upper().like(l)).select(),k=request.args(0)))\n    if(request.args[1]==\'User\'):\n        return (dict(row=db(db.auth_user.first_name.upper().like(l)).select(),k=request.args(0)))\ndef test3():\n    #return(dict(form=db(db.album.id=request.args(0)).select()))\n     return dict(form=crud.update(db.album, request.args(0),next=URL(r=request,f="index")))\ndef albums():\n    k=request.args(0)\n    form=db(db.album.id==k).select()\n    form1=db(db.songs.album==k).select()\n    form2=db().select(db.songs.ALL)\n    return(dict(form=form,form1=form1,form2=form2))\n\ndef search():\n    form = SQLFORM.factory(\n        Field(\'search\', requires=IS_NOT_EMPTY()),\n        Field(\'field\',requires=IS_IN_SET([\'Album\',\'Songs\',\'Artist\',\'User\']),default=\'Male\',widget=SQLFORM.widgets.radio.widget)\n        )\n    if form.accepts(request.vars, session):\n       redirect(URL(r=request,f="test2",args=[form.vars.search,form.vars.field]))     \n    return(dict(form=form))\ndef feedback():\n    form=SQLFORM(db.feedback)\n    form.vars.userid=auth.user_id\n    if form.accepts(request.vars, session):\n        session.flash = \'Feedback Submited\'\n        redirect(URL(r=request,f="index"))\n    return(dict(form=form))\ndef reportabuse():\n    form=SQLFORM(db.reportabuse)\n    form.vars.userid=auth.user_id\n    if form.accepts(request.vars, session):\n        session.flash = \'Submited\'\n        redirect(URL(r=request,f="index"))\n    return(dict(form=form))\ndef comments():\n    k=request.args(0)\n    form=SQLFORM(db.comments)\n    form.vars.userid=auth.user_id\n    form.vars.songid=k\n    rows=db(db.comments.songid==k).select(db.comments.ALL, db.auth_user.ALL, left=db.comments.on(db.auth_user.id==db.comments.userid))\n    form1=db(db.comments.songid==k).select()\n    if form.accepts(request.vars,session):\n        response.flash=T(\'Comment Added\')\n        redirect(URL(r=request,f="comments",args=k))\n    return dict(form=form,k=k,form1=rows)\ndef others():\n    k=request.args(0)\n    response.flash = T(\'Welcome to Your Music Library\')\n    file1=db().select(db.uploadpic.ALL)\n    form=db(db.playlist.userid==k).select()\n    firstname=db(db.auth_user.id==k).select()\n    users=db().select(db.auth_user.ALL)\n    #lastname=auth.user_last_name\n    return dict(users=users,firstname=firstname,message=T(\'Hello World\'),file1=file1,form=form)\ndef delete():\n    db(db.songs.id>0).delete()\ndef album():\n    form=db(db.album.language==\'1\').select()\n    form1=db(db.album.language==\'2\').select()\n    form2=db(db.album.language==\'3\').select()\n    return(dict(form=form,form1=form1,form2=form2))\ndef test4():\n    return(dict(k=request.args(0)))\n\nresponse._vars=response._caller(index)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/chiinna/Desktop/linux_web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/chiinna/Desktop/linux_web2py/applications/Musiclibrary/controllers/default.py", line 203, in <module>\n  File "/home/chiinna/Desktop/linux_web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/chiinna/Desktop/linux_web2py/applications/Musiclibrary/controllers/default.py", line 17, in index\n    file1=db(db.uploadpic.userid==auth_user.id).select()\nNameError: global name \'auth_user\' is not defined\n'
p8
s.